"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./hooks/usePresaleProgram.ts":
/*!************************************!*\
  !*** ./hooks/usePresaleProgram.ts ***!
  \************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   usePresaleProgram: function() { return /* binding */ usePresaleProgram; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _solana_wallet_adapter_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @solana/wallet-adapter-react */ \"./node_modules/@solana/wallet-adapter-react/lib/esm/index.js\");\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @solana/web3.js */ \"./node_modules/@solana/web3.js/lib/index.browser.esm.js\");\n/* harmony import */ var _coral_xyz_anchor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @coral-xyz/anchor */ \"./node_modules/@coral-xyz/anchor/dist/browser/index.js\");\n/* harmony import */ var _solana_spl_token__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @solana/spl-token */ \"./node_modules/@solana/spl-token/lib/esm/index.js\");\n/* harmony import */ var _utils_presale_json__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/presale.json */ \"./utils/presale.json\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\n\n\n\n\n\n// Program ID from the IDL\nconst programId = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.PublicKey(\"F8F9Ny7p3jXkZctSmzZFfDnpdhrqnCW4tQnbqVYWHcbv\");\nconst plasmaMint = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.PublicKey(\"ARTBJwHjYbxDFY9i2qLaGddmTgWDzXh4hkfuEWisFipZ\");\n// Seeds for PDAs\nconst VAULT_SEED = Buffer.from(\"vault\");\nconst USER_INFO_SEED = Buffer.from(\"user_info\");\nconst usePresaleProgram = ()=>{\n    const { connection } = (0,_solana_wallet_adapter_react__WEBPACK_IMPORTED_MODULE_4__.useConnection)();\n    const wallet = (0,_solana_wallet_adapter_react__WEBPACK_IMPORTED_MODULE_4__.useWallet)();\n    const { publicKey, sendTransaction } = wallet;\n    const [presaleAccount, setPresaleAccount] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [userInfo, setUserInfo] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    // Helper to get the program instance\n    const getProgram = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (!publicKey) return null;\n        // Create a proper AnchorProvider\n        const provider = new _coral_xyz_anchor__WEBPACK_IMPORTED_MODULE_2__.AnchorProvider(connection, wallet, {\n            commitment: \"confirmed\"\n        });\n        // @ts-ignore - idl type mismatch can be ignored\n        return new _coral_xyz_anchor__WEBPACK_IMPORTED_MODULE_2__.Program(_utils_presale_json__WEBPACK_IMPORTED_MODULE_3__, programId, provider);\n    }, [\n        connection,\n        publicKey,\n        wallet\n    ]);\n    const fetchPresaleData = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{\n        try {\n            setIsLoading(true);\n            const program = getProgram();\n            if (!program) return;\n            // Fetch all presale accounts\n            const presales = await program.account.presaleAccount.all();\n            if (presales.length > 0) {\n                setPresaleAccount({\n                    ...presales[0].account,\n                    publicKey: presales[0].publicKey\n                });\n            }\n        } catch (error) {\n            console.error(\"Error fetching presale data:\", error);\n        } finally{\n            setIsLoading(false);\n        }\n    }, [\n        getProgram\n    ]);\n    const fetchUserInfo = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{\n        if (!publicKey) return;\n        try {\n            setIsLoading(true);\n            const program = getProgram();\n            if (!program) return;\n            // Get PDA for user info account\n            const [userInfoPda] = _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.PublicKey.findProgramAddressSync([\n                USER_INFO_SEED,\n                publicKey.toBuffer(),\n                plasmaMint.toBuffer()\n            ], programId);\n            try {\n                const userInfoAccount = await program.account.userInfo.fetch(userInfoPda);\n                setUserInfo(userInfoAccount);\n            } catch (error) {\n                // User info account doesn't exist yet\n                setUserInfo(null);\n            }\n        } catch (error) {\n            console.error(\"Error fetching user info:\", error);\n        } finally{\n            setIsLoading(false);\n        }\n    }, [\n        publicKey,\n        getProgram\n    ]);\n    const initializePresale = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (pricePerToken, totalAllocation, treasury)=>{\n        if (!publicKey) return;\n        try {\n            setIsLoading(true);\n            const program = getProgram();\n            if (!program) return;\n            // Get PDA for presale vault\n            const [vaultPda] = _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.PublicKey.findProgramAddressSync([\n                VAULT_SEED,\n                plasmaMint.toBuffer()\n            ], programId);\n            // Get PDA for vault authority\n            const [vaultAuthorityPda] = _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.PublicKey.findProgramAddressSync([\n                VAULT_SEED,\n                plasmaMint.toBuffer()\n            ], programId);\n            // Create a new account for presale state\n            const presaleKeypair = _coral_xyz_anchor__WEBPACK_IMPORTED_MODULE_2__.web3.Keypair.generate();\n            const tx = await program.methods.initialize(new _coral_xyz_anchor__WEBPACK_IMPORTED_MODULE_2__.BN(pricePerToken), new _coral_xyz_anchor__WEBPACK_IMPORTED_MODULE_2__.BN(totalAllocation)).accounts({\n                presale: presaleKeypair.publicKey,\n                plasmaMint: plasmaMint,\n                presaleVault: vaultPda,\n                presaleVaultAuthority: vaultAuthorityPda,\n                treasury: treasury,\n                authority: publicKey,\n                systemProgram: _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.SystemProgram.programId,\n                tokenProgram: _solana_spl_token__WEBPACK_IMPORTED_MODULE_5__.TOKEN_PROGRAM_ID,\n                rent: _coral_xyz_anchor__WEBPACK_IMPORTED_MODULE_2__.web3.SYSVAR_RENT_PUBKEY\n            }).signers([\n                presaleKeypair\n            ]).transaction();\n            const signature = await sendTransaction(tx, connection);\n            await connection.confirmTransaction(signature, \"confirmed\");\n            console.log(\"Presale initialized with signature:\", signature);\n            fetchPresaleData();\n        } catch (error) {\n            console.error(\"Error initializing presale:\", error);\n        } finally{\n            setIsLoading(false);\n        }\n    }, [\n        publicKey,\n        getProgram,\n        connection,\n        sendTransaction,\n        fetchPresaleData\n    ]);\n    const buyTokens = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (amount)=>{\n        if (!publicKey || !presaleAccount) return;\n        try {\n            setIsLoading(true);\n            const program = getProgram();\n            if (!program) return;\n            // Get PDA for presale vault\n            const [vaultPda] = _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.PublicKey.findProgramAddressSync([\n                VAULT_SEED,\n                plasmaMint.toBuffer()\n            ], programId);\n            // Get PDA for vault authority\n            const [vaultAuthorityPda] = _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.PublicKey.findProgramAddressSync([\n                VAULT_SEED,\n                plasmaMint.toBuffer()\n            ], programId);\n            // Get PDA for user info\n            const [userInfoPda] = _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.PublicKey.findProgramAddressSync([\n                USER_INFO_SEED,\n                publicKey.toBuffer(),\n                plasmaMint.toBuffer()\n            ], programId);\n            // Get user vault for tokens\n            const userVault = await (0,_solana_spl_token__WEBPACK_IMPORTED_MODULE_5__.getAssociatedTokenAddress)(plasmaMint, userInfoPda, true);\n            const treasuryAccount = presaleAccount.treasury;\n            const tx = await program.methods.buyTokens(new _coral_xyz_anchor__WEBPACK_IMPORTED_MODULE_2__.BN(amount)).accounts({\n                presale: presaleAccount.publicKey,\n                presaleVault: vaultPda,\n                presaleVaultAuthority: vaultAuthorityPda,\n                userInfo: userInfoPda,\n                userVault: userVault,\n                plasmaMint: plasmaMint,\n                treasuryAccount: treasuryAccount,\n                buyer: publicKey,\n                systemProgram: _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.SystemProgram.programId,\n                tokenProgram: _solana_spl_token__WEBPACK_IMPORTED_MODULE_5__.TOKEN_PROGRAM_ID,\n                associatedTokenProgram: _solana_spl_token__WEBPACK_IMPORTED_MODULE_5__.ASSOCIATED_TOKEN_PROGRAM_ID,\n                rent: _coral_xyz_anchor__WEBPACK_IMPORTED_MODULE_2__.web3.SYSVAR_RENT_PUBKEY\n            }).transaction();\n            const signature = await sendTransaction(tx, connection);\n            await connection.confirmTransaction(signature, \"confirmed\");\n            console.log(\"Tokens purchased with signature:\", signature);\n            fetchUserInfo();\n            fetchPresaleData();\n        } catch (error) {\n            console.error(\"Error buying tokens:\", error);\n        } finally{\n            setIsLoading(false);\n        }\n    }, [\n        publicKey,\n        presaleAccount,\n        getProgram,\n        connection,\n        sendTransaction,\n        fetchUserInfo,\n        fetchPresaleData\n    ]);\n    const claimTokens = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{\n        if (!publicKey || !userInfo) return;\n        try {\n            setIsLoading(true);\n            const program = getProgram();\n            if (!program) return;\n            // Get PDA for user info\n            const [userInfoPda] = _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.PublicKey.findProgramAddressSync([\n                USER_INFO_SEED,\n                publicKey.toBuffer(),\n                plasmaMint.toBuffer()\n            ], programId);\n            // Get user vault\n            const userVault = await (0,_solana_spl_token__WEBPACK_IMPORTED_MODULE_5__.getAssociatedTokenAddress)(plasmaMint, userInfoPda, true);\n            // Get user token account\n            const userTokenAccount = await (0,_solana_spl_token__WEBPACK_IMPORTED_MODULE_5__.getAssociatedTokenAddress)(plasmaMint, publicKey);\n            const tx = await program.methods.claimTokens().accounts({\n                userInfo: userInfoPda,\n                userVault: userVault,\n                userTokenAccount: userTokenAccount,\n                plasmaMint: plasmaMint,\n                buyer: publicKey,\n                systemProgram: _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.SystemProgram.programId,\n                tokenProgram: _solana_spl_token__WEBPACK_IMPORTED_MODULE_5__.TOKEN_PROGRAM_ID,\n                associatedTokenProgram: _solana_spl_token__WEBPACK_IMPORTED_MODULE_5__.ASSOCIATED_TOKEN_PROGRAM_ID,\n                rent: _coral_xyz_anchor__WEBPACK_IMPORTED_MODULE_2__.web3.SYSVAR_RENT_PUBKEY\n            }).transaction();\n            const signature = await sendTransaction(tx, connection);\n            await connection.confirmTransaction(signature, \"confirmed\");\n            console.log(\"Tokens claimed with signature:\", signature);\n            fetchUserInfo();\n        } catch (error) {\n            console.error(\"Error claiming tokens:\", error);\n        } finally{\n            setIsLoading(false);\n        }\n    }, [\n        publicKey,\n        userInfo,\n        getProgram,\n        connection,\n        sendTransaction,\n        fetchUserInfo\n    ]);\n    const togglePresale = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (active)=>{\n        if (!publicKey || !presaleAccount) return;\n        try {\n            setIsLoading(true);\n            const program = getProgram();\n            if (!program) return;\n            const tx = await program.methods.togglePresale(active).accounts({\n                presale: presaleAccount.publicKey,\n                authority: publicKey\n            }).transaction();\n            const signature = await sendTransaction(tx, connection);\n            await connection.confirmTransaction(signature, \"confirmed\");\n            console.log(\"Presale \".concat(active ? \"activated\" : \"deactivated\", \" with signature:\"), signature);\n            fetchPresaleData();\n        } catch (error) {\n            console.error(\"Error toggling presale:\", error);\n        } finally{\n            setIsLoading(false);\n        }\n    }, [\n        publicKey,\n        presaleAccount,\n        getProgram,\n        connection,\n        sendTransaction,\n        fetchPresaleData\n    ]);\n    return {\n        presaleAccount,\n        userInfo,\n        isLoading,\n        fetchPresaleData,\n        fetchUserInfo,\n        initializePresale,\n        buyTokens,\n        claimTokens,\n        togglePresale\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./hooks/usePresaleProgram.ts\n"));

/***/ })

});