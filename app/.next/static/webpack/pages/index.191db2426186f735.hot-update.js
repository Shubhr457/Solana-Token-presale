"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./hooks/usePresaleProgram.ts":
/*!************************************!*\
  !*** ./hooks/usePresaleProgram.ts ***!
  \************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   usePresaleProgram: function() { return /* binding */ usePresaleProgram; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _solana_wallet_adapter_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @solana/wallet-adapter-react */ \"./node_modules/@solana/wallet-adapter-react/lib/esm/index.js\");\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @solana/web3.js */ \"./node_modules/@solana/web3.js/lib/index.browser.esm.js\");\n/* harmony import */ var _coral_xyz_anchor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @coral-xyz/anchor */ \"./node_modules/@coral-xyz/anchor/dist/browser/index.js\");\n/* harmony import */ var _solana_spl_token__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @solana/spl-token */ \"./node_modules/@solana/spl-token/lib/esm/index.js\");\n/* harmony import */ var _utils_presale_json__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/presale.json */ \"./utils/presale.json\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\n\n\n\n\n\n// Program ID from the IDL\nconst programId = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.PublicKey(\"F8F9Ny7p3jXkZctSmzZFfDnpdhrqnCW4tQnbqVYWHcbv\");\nconst plasmaMint = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.PublicKey(\"ARTBJwHjYbxDFY9i2qLaGddmTgWDzXh4hkfuEWisFipZ\");\n// Seeds for PDAs\nconst VAULT_SEED = Buffer.from(\"vault\");\nconst USER_INFO_SEED = Buffer.from(\"user_info\");\nconst usePresaleProgram = ()=>{\n    const { connection } = (0,_solana_wallet_adapter_react__WEBPACK_IMPORTED_MODULE_4__.useConnection)();\n    const wallet = (0,_solana_wallet_adapter_react__WEBPACK_IMPORTED_MODULE_4__.useWallet)();\n    const { publicKey, sendTransaction } = wallet;\n    const [presaleAccount, setPresaleAccount] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [userInfo, setUserInfo] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    // Helper to get the program instance\n    const getProgram = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (!publicKey) return null;\n        try {\n            // Create a proper AnchorProvider\n            const provider = new _coral_xyz_anchor__WEBPACK_IMPORTED_MODULE_2__.AnchorProvider(connection, wallet, {\n                commitment: \"confirmed\"\n            });\n            // Use provider.workspace instead of directly creating a Program\n            return {\n                methods: {\n                    // Simulate the program methods we need\n                    initialize: (pricePerToken, totalAllocation)=>{\n                        return {\n                            accounts: (accounts)=>{\n                                return {\n                                    signers: (signers)=>{\n                                        return {\n                                            transaction: async ()=>{\n                                                // Build a transaction for initializing the presale\n                                                const ix = await _coral_xyz_anchor__WEBPACK_IMPORTED_MODULE_2__.Program.createProgramAddress(_utils_presale_json__WEBPACK_IMPORTED_MODULE_3__, programId);\n                                                return new _coral_xyz_anchor__WEBPACK_IMPORTED_MODULE_2__.web3.Transaction().add(ix);\n                                            }\n                                        };\n                                    }\n                                };\n                            }\n                        };\n                    },\n                    buyTokens: (amount)=>{\n                        return {\n                            accounts: (accounts)=>{\n                                return {\n                                    transaction: async ()=>{\n                                        // Build a transaction for buying tokens\n                                        const ix = await _coral_xyz_anchor__WEBPACK_IMPORTED_MODULE_2__.Program.createProgramAddress(_utils_presale_json__WEBPACK_IMPORTED_MODULE_3__, programId);\n                                        return new _coral_xyz_anchor__WEBPACK_IMPORTED_MODULE_2__.web3.Transaction().add(ix);\n                                    }\n                                };\n                            }\n                        };\n                    },\n                    claimTokens: ()=>{\n                        return {\n                            accounts: (accounts)=>{\n                                return {\n                                    transaction: async ()=>{\n                                        // Build a transaction for claiming tokens\n                                        const ix = await _coral_xyz_anchor__WEBPACK_IMPORTED_MODULE_2__.Program.createProgramAddress(_utils_presale_json__WEBPACK_IMPORTED_MODULE_3__, programId);\n                                        return new _coral_xyz_anchor__WEBPACK_IMPORTED_MODULE_2__.web3.Transaction().add(ix);\n                                    }\n                                };\n                            }\n                        };\n                    },\n                    togglePresale: (active)=>{\n                        return {\n                            accounts: (accounts)=>{\n                                return {\n                                    transaction: async ()=>{\n                                        // Build a transaction for toggling presale\n                                        const ix = await _coral_xyz_anchor__WEBPACK_IMPORTED_MODULE_2__.Program.createProgramAddress(_utils_presale_json__WEBPACK_IMPORTED_MODULE_3__, programId);\n                                        return new _coral_xyz_anchor__WEBPACK_IMPORTED_MODULE_2__.web3.Transaction().add(ix);\n                                    }\n                                };\n                            }\n                        };\n                    }\n                },\n                account: {\n                    presaleAccount: {\n                        all: async ()=>{\n                            // Mock response for presale accounts\n                            return [\n                                {\n                                    publicKey: new _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.PublicKey(_utils_presale_json__WEBPACK_IMPORTED_MODULE_3__.address),\n                                    account: {\n                                        authority: publicKey,\n                                        plasma_mint: plasmaMint,\n                                        treasury: publicKey,\n                                        price_per_token: new _coral_xyz_anchor__WEBPACK_IMPORTED_MODULE_2__.BN(100000000),\n                                        total_allocation: new _coral_xyz_anchor__WEBPACK_IMPORTED_MODULE_2__.BN(1000000000000),\n                                        tokens_sold: new _coral_xyz_anchor__WEBPACK_IMPORTED_MODULE_2__.BN(0),\n                                        is_active: true\n                                    }\n                                }\n                            ];\n                        }\n                    },\n                    userInfo: {\n                        fetch: async (address)=>{\n                            // Mock response for user info\n                            return {\n                                buyer: publicKey,\n                                amount: new _coral_xyz_anchor__WEBPACK_IMPORTED_MODULE_2__.BN(10000000000),\n                                unlock_time: new _coral_xyz_anchor__WEBPACK_IMPORTED_MODULE_2__.BN(Math.floor(Date.now() / 1000) + 86400),\n                                claimed: false,\n                                bump: 254\n                            };\n                        }\n                    }\n                }\n            };\n        } catch (error) {\n            console.error(\"Error creating program instance:\", error);\n            return null;\n        }\n    }, [\n        connection,\n        publicKey,\n        wallet\n    ]);\n    const fetchPresaleData = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{\n        try {\n            setIsLoading(true);\n            const program = getProgram();\n            if (!program) return;\n            try {\n                // Fetch all presale accounts\n                const presales = await program.account.presaleAccount.all();\n                if (presales.length > 0) {\n                    const account = presales[0].account;\n                    // Map snake_case to camelCase properties for compatibility\n                    setPresaleAccount({\n                        authority: account.authority,\n                        plasmaMint: account.plasma_mint,\n                        treasury: account.treasury,\n                        pricePerToken: account.price_per_token,\n                        totalAllocation: account.total_allocation,\n                        tokensSold: account.tokens_sold,\n                        isActive: account.is_active,\n                        publicKey: presales[0].publicKey\n                    });\n                }\n            } catch (error) {\n                console.error(\"Error fetching presale accounts:\", error);\n            }\n        } catch (error) {\n            console.error(\"Error fetching presale data:\", error);\n        } finally{\n            setIsLoading(false);\n        }\n    }, [\n        getProgram\n    ]);\n    const fetchUserInfo = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{\n        if (!publicKey) return;\n        try {\n            setIsLoading(true);\n            const program = getProgram();\n            if (!program) return;\n            // Get PDA for user info account\n            const [userInfoPda] = _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.PublicKey.findProgramAddressSync([\n                USER_INFO_SEED,\n                publicKey.toBuffer(),\n                plasmaMint.toBuffer()\n            ], programId);\n            try {\n                const userInfoAccount = await program.account.userInfo.fetch(userInfoPda);\n                // Map snake_case to camelCase properties for compatibility\n                setUserInfo({\n                    buyer: userInfoAccount.buyer,\n                    amount: userInfoAccount.amount,\n                    unlockTime: userInfoAccount.unlock_time,\n                    claimed: userInfoAccount.claimed,\n                    bump: userInfoAccount.bump\n                });\n            } catch (error) {\n                // User info account doesn't exist yet\n                setUserInfo(null);\n            }\n        } catch (error) {\n            console.error(\"Error fetching user info:\", error);\n        } finally{\n            setIsLoading(false);\n        }\n    }, [\n        publicKey,\n        getProgram\n    ]);\n    const initializePresale = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (pricePerToken, totalAllocation, treasury)=>{\n        if (!publicKey) return;\n        try {\n            setIsLoading(true);\n            const program = getProgram();\n            if (!program) return;\n            // Get PDA for presale vault\n            const [vaultPda] = _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.PublicKey.findProgramAddressSync([\n                VAULT_SEED,\n                plasmaMint.toBuffer()\n            ], programId);\n            // Get PDA for vault authority\n            const [vaultAuthorityPda] = _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.PublicKey.findProgramAddressSync([\n                VAULT_SEED,\n                plasmaMint.toBuffer()\n            ], programId);\n            // Create a new account for presale state\n            const presaleKeypair = _coral_xyz_anchor__WEBPACK_IMPORTED_MODULE_2__.web3.Keypair.generate();\n            const tx = await program.methods.initialize(new _coral_xyz_anchor__WEBPACK_IMPORTED_MODULE_2__.BN(pricePerToken), new _coral_xyz_anchor__WEBPACK_IMPORTED_MODULE_2__.BN(totalAllocation)).accounts({\n                presale: presaleKeypair.publicKey,\n                plasma_mint: plasmaMint,\n                presale_vault: vaultPda,\n                presale_vault_authority: vaultAuthorityPda,\n                treasury: treasury,\n                authority: publicKey,\n                system_program: _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.SystemProgram.programId,\n                token_program: _solana_spl_token__WEBPACK_IMPORTED_MODULE_5__.TOKEN_PROGRAM_ID,\n                rent: _coral_xyz_anchor__WEBPACK_IMPORTED_MODULE_2__.web3.SYSVAR_RENT_PUBKEY\n            }).signers([\n                presaleKeypair\n            ]).transaction();\n            const signature = await sendTransaction(tx, connection, {\n                signers: [\n                    presaleKeypair\n                ]\n            });\n            await connection.confirmTransaction(signature, \"confirmed\");\n            console.log(\"Presale initialized with signature:\", signature);\n            fetchPresaleData();\n        } catch (error) {\n            console.error(\"Error initializing presale:\", error);\n        } finally{\n            setIsLoading(false);\n        }\n    }, [\n        publicKey,\n        getProgram,\n        connection,\n        sendTransaction,\n        fetchPresaleData\n    ]);\n    const buyTokens = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (amount)=>{\n        if (!publicKey || !presaleAccount) return;\n        try {\n            setIsLoading(true);\n            const program = getProgram();\n            if (!program) return;\n            // Get PDA for presale vault\n            const [vaultPda] = _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.PublicKey.findProgramAddressSync([\n                VAULT_SEED,\n                plasmaMint.toBuffer()\n            ], programId);\n            // Get PDA for vault authority\n            const [vaultAuthorityPda] = _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.PublicKey.findProgramAddressSync([\n                VAULT_SEED,\n                plasmaMint.toBuffer()\n            ], programId);\n            // Get PDA for user info\n            const [userInfoPda] = _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.PublicKey.findProgramAddressSync([\n                USER_INFO_SEED,\n                publicKey.toBuffer(),\n                plasmaMint.toBuffer()\n            ], programId);\n            // Get user vault for tokens\n            const userVault = await (0,_solana_spl_token__WEBPACK_IMPORTED_MODULE_5__.getAssociatedTokenAddress)(plasmaMint, userInfoPda, true);\n            const treasuryAccount = presaleAccount.treasury;\n            const tx = await program.methods.buyTokens(new _coral_xyz_anchor__WEBPACK_IMPORTED_MODULE_2__.BN(amount)).accounts({\n                presale: presaleAccount.publicKey,\n                presale_vault: vaultPda,\n                presale_vault_authority: vaultAuthorityPda,\n                user_info: userInfoPda,\n                user_vault: userVault,\n                plasma_mint: plasmaMint,\n                treasury_account: treasuryAccount,\n                buyer: publicKey,\n                system_program: _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.SystemProgram.programId,\n                token_program: _solana_spl_token__WEBPACK_IMPORTED_MODULE_5__.TOKEN_PROGRAM_ID,\n                associated_token_program: _solana_spl_token__WEBPACK_IMPORTED_MODULE_5__.ASSOCIATED_TOKEN_PROGRAM_ID,\n                rent: _coral_xyz_anchor__WEBPACK_IMPORTED_MODULE_2__.web3.SYSVAR_RENT_PUBKEY\n            }).transaction();\n            const signature = await sendTransaction(tx, connection);\n            await connection.confirmTransaction(signature, \"confirmed\");\n            console.log(\"Tokens purchased with signature:\", signature);\n            fetchUserInfo();\n            fetchPresaleData();\n        } catch (error) {\n            console.error(\"Error buying tokens:\", error);\n            throw error;\n        } finally{\n            setIsLoading(false);\n        }\n    }, [\n        publicKey,\n        presaleAccount,\n        getProgram,\n        connection,\n        sendTransaction,\n        fetchUserInfo,\n        fetchPresaleData\n    ]);\n    const claimTokens = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{\n        if (!publicKey || !userInfo) return;\n        try {\n            setIsLoading(true);\n            const program = getProgram();\n            if (!program) return;\n            // Get PDA for user info\n            const [userInfoPda] = _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.PublicKey.findProgramAddressSync([\n                USER_INFO_SEED,\n                publicKey.toBuffer(),\n                plasmaMint.toBuffer()\n            ], programId);\n            // Get user vault\n            const userVault = await (0,_solana_spl_token__WEBPACK_IMPORTED_MODULE_5__.getAssociatedTokenAddress)(plasmaMint, userInfoPda, true);\n            // Get user token account\n            const userTokenAccount = await (0,_solana_spl_token__WEBPACK_IMPORTED_MODULE_5__.getAssociatedTokenAddress)(plasmaMint, publicKey);\n            const tx = await program.methods.claimTokens().accounts({\n                user_info: userInfoPda,\n                user_vault: userVault,\n                user_token_account: userTokenAccount,\n                plasma_mint: plasmaMint,\n                buyer: publicKey,\n                system_program: _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.SystemProgram.programId,\n                token_program: _solana_spl_token__WEBPACK_IMPORTED_MODULE_5__.TOKEN_PROGRAM_ID,\n                associated_token_program: _solana_spl_token__WEBPACK_IMPORTED_MODULE_5__.ASSOCIATED_TOKEN_PROGRAM_ID,\n                rent: _coral_xyz_anchor__WEBPACK_IMPORTED_MODULE_2__.web3.SYSVAR_RENT_PUBKEY\n            }).transaction();\n            const signature = await sendTransaction(tx, connection);\n            await connection.confirmTransaction(signature, \"confirmed\");\n            console.log(\"Tokens claimed with signature:\", signature);\n            fetchUserInfo();\n        } catch (error) {\n            console.error(\"Error claiming tokens:\", error);\n            throw error;\n        } finally{\n            setIsLoading(false);\n        }\n    }, [\n        publicKey,\n        userInfo,\n        getProgram,\n        connection,\n        sendTransaction,\n        fetchUserInfo\n    ]);\n    const togglePresale = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (active)=>{\n        if (!publicKey || !presaleAccount) return;\n        try {\n            setIsLoading(true);\n            const program = getProgram();\n            if (!program) return;\n            const tx = await program.methods.togglePresale(active).accounts({\n                presale: presaleAccount.publicKey,\n                authority: publicKey\n            }).transaction();\n            const signature = await sendTransaction(tx, connection);\n            await connection.confirmTransaction(signature, \"confirmed\");\n            console.log(\"Presale \".concat(active ? \"activated\" : \"deactivated\", \" with signature:\"), signature);\n            fetchPresaleData();\n        } catch (error) {\n            console.error(\"Error toggling presale:\", error);\n            throw error;\n        } finally{\n            setIsLoading(false);\n        }\n    }, [\n        publicKey,\n        presaleAccount,\n        getProgram,\n        connection,\n        sendTransaction,\n        fetchPresaleData\n    ]);\n    return {\n        presaleAccount,\n        userInfo,\n        isLoading,\n        fetchPresaleData,\n        fetchUserInfo,\n        initializePresale,\n        buyTokens,\n        claimTokens,\n        togglePresale\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ob29rcy91c2VQcmVzYWxlUHJvZ3JhbS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBOEM7QUFDMEI7QUFDSztBQUNGO0FBS2hEO0FBQ2lCO0FBRTVDLDBCQUEwQjtBQUMxQixNQUFNYyxZQUFZLElBQUlWLHNEQUFTQSxDQUFDO0FBQ2hDLE1BQU1XLGFBQWEsSUFBSVgsc0RBQVNBLENBQUM7QUFFakMsaUJBQWlCO0FBQ2pCLE1BQU1ZLGFBQWFDLE1BQU1BLENBQUNDLElBQUksQ0FBQztBQUMvQixNQUFNQyxpQkFBaUJGLE1BQU1BLENBQUNDLElBQUksQ0FBQztBQUU1QixNQUFNRSxvQkFBb0I7SUFDL0IsTUFBTSxFQUFFQyxVQUFVLEVBQUUsR0FBR25CLDJFQUFhQTtJQUNwQyxNQUFNb0IsU0FBU25CLHVFQUFTQTtJQUN4QixNQUFNLEVBQUVvQixTQUFTLEVBQUVDLGVBQWUsRUFBRSxHQUFHRjtJQUN2QyxNQUFNLENBQUNHLGdCQUFnQkMsa0JBQWtCLEdBQUd6QiwrQ0FBUUEsQ0FBTTtJQUMxRCxNQUFNLENBQUMwQixVQUFVQyxZQUFZLEdBQUczQiwrQ0FBUUEsQ0FBTTtJQUM5QyxNQUFNLENBQUM0QixXQUFXQyxhQUFhLEdBQUc3QiwrQ0FBUUEsQ0FBQztJQUUzQyxxQ0FBcUM7SUFDckMsTUFBTThCLGFBQWEvQixrREFBV0EsQ0FBQztRQUM3QixJQUFJLENBQUN1QixXQUFXLE9BQU87UUFFdkIsSUFBSTtZQUNGLGlDQUFpQztZQUNqQyxNQUFNUyxXQUFXLElBQUl2Qiw2REFBY0EsQ0FDakNZLFlBQ0FDLFFBQ0E7Z0JBQUVXLFlBQVk7WUFBWTtZQUc1QixnRUFBZ0U7WUFDaEUsT0FBTztnQkFDTEMsU0FBUztvQkFDUCx1Q0FBdUM7b0JBQ3ZDQyxZQUFZLENBQUNDLGVBQW1CQzt3QkFDOUIsT0FBTzs0QkFDTEMsVUFBVSxDQUFDQTtnQ0FDVCxPQUFPO29DQUNMQyxTQUFTLENBQUNBO3dDQUNSLE9BQU87NENBQ0xDLGFBQWE7Z0RBQ1gsbURBQW1EO2dEQUNuRCxNQUFNQyxLQUFLLE1BQU1sQyxzREFBT0EsQ0FBQ21DLG9CQUFvQixDQUMzQzdCLGdEQUFPQSxFQUNQQztnREFFRixPQUFPLElBQUlOLG1EQUFJQSxDQUFDbUMsV0FBVyxHQUFHQyxHQUFHLENBQUNIOzRDQUNwQzt3Q0FDRjtvQ0FDRjtnQ0FDRjs0QkFDRjt3QkFDRjtvQkFDRjtvQkFDQUksV0FBVyxDQUFDQzt3QkFDVixPQUFPOzRCQUNMUixVQUFVLENBQUNBO2dDQUNULE9BQU87b0NBQ0xFLGFBQWE7d0NBQ1gsd0NBQXdDO3dDQUN4QyxNQUFNQyxLQUFLLE1BQU1sQyxzREFBT0EsQ0FBQ21DLG9CQUFvQixDQUMzQzdCLGdEQUFPQSxFQUNQQzt3Q0FFRixPQUFPLElBQUlOLG1EQUFJQSxDQUFDbUMsV0FBVyxHQUFHQyxHQUFHLENBQUNIO29DQUNwQztnQ0FDRjs0QkFDRjt3QkFDRjtvQkFDRjtvQkFDQU0sYUFBYTt3QkFDWCxPQUFPOzRCQUNMVCxVQUFVLENBQUNBO2dDQUNULE9BQU87b0NBQ0xFLGFBQWE7d0NBQ1gsMENBQTBDO3dDQUMxQyxNQUFNQyxLQUFLLE1BQU1sQyxzREFBT0EsQ0FBQ21DLG9CQUFvQixDQUMzQzdCLGdEQUFPQSxFQUNQQzt3Q0FFRixPQUFPLElBQUlOLG1EQUFJQSxDQUFDbUMsV0FBVyxHQUFHQyxHQUFHLENBQUNIO29DQUNwQztnQ0FDRjs0QkFDRjt3QkFDRjtvQkFDRjtvQkFDQU8sZUFBZSxDQUFDQzt3QkFDZCxPQUFPOzRCQUNMWCxVQUFVLENBQUNBO2dDQUNULE9BQU87b0NBQ0xFLGFBQWE7d0NBQ1gsMkNBQTJDO3dDQUMzQyxNQUFNQyxLQUFLLE1BQU1sQyxzREFBT0EsQ0FBQ21DLG9CQUFvQixDQUMzQzdCLGdEQUFPQSxFQUNQQzt3Q0FFRixPQUFPLElBQUlOLG1EQUFJQSxDQUFDbUMsV0FBVyxHQUFHQyxHQUFHLENBQUNIO29DQUNwQztnQ0FDRjs0QkFDRjt3QkFDRjtvQkFDRjtnQkFDRjtnQkFDQVMsU0FBUztvQkFDUHpCLGdCQUFnQjt3QkFDZDBCLEtBQUs7NEJBQ0gscUNBQXFDOzRCQUNyQyxPQUFPO2dDQUFDO29DQUNONUIsV0FBVyxJQUFJbkIsc0RBQVNBLENBQUNTLHdEQUFlO29DQUN4Q3FDLFNBQVM7d0NBQ1BHLFdBQVc5Qjt3Q0FDWCtCLGFBQWF2Qzt3Q0FDYndDLFVBQVVoQzt3Q0FDVmlDLGlCQUFpQixJQUFJbEQsaURBQUVBLENBQUM7d0NBQ3hCbUQsa0JBQWtCLElBQUluRCxpREFBRUEsQ0FBQzt3Q0FDekJvRCxhQUFhLElBQUlwRCxpREFBRUEsQ0FBQzt3Q0FDcEJxRCxXQUFXO29DQUNiO2dDQUNGOzZCQUFFO3dCQUNKO29CQUNGO29CQUNBaEMsVUFBVTt3QkFDUmlDLE9BQU8sT0FBT1I7NEJBQ1osOEJBQThCOzRCQUM5QixPQUFPO2dDQUNMUyxPQUFPdEM7Z0NBQ1B1QixRQUFRLElBQUl4QyxpREFBRUEsQ0FBQztnQ0FDZndELGFBQWEsSUFBSXhELGlEQUFFQSxDQUFDeUQsS0FBS0MsS0FBSyxDQUFDQyxLQUFLQyxHQUFHLEtBQUssUUFBUTtnQ0FDcERDLFNBQVM7Z0NBQ1RDLE1BQU07NEJBQ1I7d0JBQ0Y7b0JBQ0Y7Z0JBQ0Y7WUFDRjtRQUNGLEVBQUUsT0FBT0MsT0FBTztZQUNkQyxRQUFRRCxLQUFLLENBQUMsb0NBQW9DQTtZQUNsRCxPQUFPO1FBQ1Q7SUFDRixHQUFHO1FBQUNoRDtRQUFZRTtRQUFXRDtLQUFPO0lBRWxDLE1BQU1pRCxtQkFBbUJ2RSxrREFBV0EsQ0FBQztRQUNuQyxJQUFJO1lBQ0Y4QixhQUFhO1lBQ2IsTUFBTTBDLFVBQVV6QztZQUNoQixJQUFJLENBQUN5QyxTQUFTO1lBRWQsSUFBSTtnQkFDRiw2QkFBNkI7Z0JBQzdCLE1BQU1DLFdBQVcsTUFBTUQsUUFBUXRCLE9BQU8sQ0FBQ3pCLGNBQWMsQ0FBQzBCLEdBQUc7Z0JBQ3pELElBQUlzQixTQUFTQyxNQUFNLEdBQUcsR0FBRztvQkFDdkIsTUFBTXhCLFVBQVV1QixRQUFRLENBQUMsRUFBRSxDQUFDdkIsT0FBTztvQkFFbkMsMkRBQTJEO29CQUMzRHhCLGtCQUFrQjt3QkFDaEIyQixXQUFXSCxRQUFRRyxTQUFTO3dCQUM1QnRDLFlBQVltQyxRQUFRSSxXQUFXO3dCQUMvQkMsVUFBVUwsUUFBUUssUUFBUTt3QkFDMUJuQixlQUFlYyxRQUFRTSxlQUFlO3dCQUN0Q25CLGlCQUFpQmEsUUFBUU8sZ0JBQWdCO3dCQUN6Q2tCLFlBQVl6QixRQUFRUSxXQUFXO3dCQUMvQmtCLFVBQVUxQixRQUFRUyxTQUFTO3dCQUMzQnBDLFdBQVdrRCxRQUFRLENBQUMsRUFBRSxDQUFDbEQsU0FBUztvQkFDbEM7Z0JBQ0Y7WUFDRixFQUFFLE9BQU84QyxPQUFPO2dCQUNkQyxRQUFRRCxLQUFLLENBQUMsb0NBQW9DQTtZQUNwRDtRQUNGLEVBQUUsT0FBT0EsT0FBTztZQUNkQyxRQUFRRCxLQUFLLENBQUMsZ0NBQWdDQTtRQUNoRCxTQUFVO1lBQ1J2QyxhQUFhO1FBQ2Y7SUFDRixHQUFHO1FBQUNDO0tBQVc7SUFFZixNQUFNOEMsZ0JBQWdCN0Usa0RBQVdBLENBQUM7UUFDaEMsSUFBSSxDQUFDdUIsV0FBVztRQUVoQixJQUFJO1lBQ0ZPLGFBQWE7WUFDYixNQUFNMEMsVUFBVXpDO1lBQ2hCLElBQUksQ0FBQ3lDLFNBQVM7WUFFZCxnQ0FBZ0M7WUFDaEMsTUFBTSxDQUFDTSxZQUFZLEdBQUcxRSxzREFBU0EsQ0FBQzJFLHNCQUFzQixDQUNwRDtnQkFBQzVEO2dCQUFnQkksVUFBVXlELFFBQVE7Z0JBQUlqRSxXQUFXaUUsUUFBUTthQUFHLEVBQzdEbEU7WUFHRixJQUFJO2dCQUNGLE1BQU1tRSxrQkFBa0IsTUFBTVQsUUFBUXRCLE9BQU8sQ0FBQ3ZCLFFBQVEsQ0FBQ2lDLEtBQUssQ0FBQ2tCO2dCQUU3RCwyREFBMkQ7Z0JBQzNEbEQsWUFBWTtvQkFDVmlDLE9BQU9vQixnQkFBZ0JwQixLQUFLO29CQUM1QmYsUUFBUW1DLGdCQUFnQm5DLE1BQU07b0JBQzlCb0MsWUFBWUQsZ0JBQWdCbkIsV0FBVztvQkFDdkNLLFNBQVNjLGdCQUFnQmQsT0FBTztvQkFDaENDLE1BQU1hLGdCQUFnQmIsSUFBSTtnQkFDNUI7WUFDRixFQUFFLE9BQU9DLE9BQU87Z0JBQ2Qsc0NBQXNDO2dCQUN0Q3pDLFlBQVk7WUFDZDtRQUNGLEVBQUUsT0FBT3lDLE9BQU87WUFDZEMsUUFBUUQsS0FBSyxDQUFDLDZCQUE2QkE7UUFDN0MsU0FBVTtZQUNSdkMsYUFBYTtRQUNmO0lBQ0YsR0FBRztRQUFDUDtRQUFXUTtLQUFXO0lBRTFCLE1BQU1vRCxvQkFBb0JuRixrREFBV0EsQ0FBQyxPQUNwQ29DLGVBQ0FDLGlCQUNBa0I7UUFFQSxJQUFJLENBQUNoQyxXQUFXO1FBRWhCLElBQUk7WUFDRk8sYUFBYTtZQUNiLE1BQU0wQyxVQUFVekM7WUFDaEIsSUFBSSxDQUFDeUMsU0FBUztZQUVkLDRCQUE0QjtZQUM1QixNQUFNLENBQUNZLFNBQVMsR0FBR2hGLHNEQUFTQSxDQUFDMkUsc0JBQXNCLENBQ2pEO2dCQUFDL0Q7Z0JBQVlELFdBQVdpRSxRQUFRO2FBQUcsRUFDbkNsRTtZQUdGLDhCQUE4QjtZQUM5QixNQUFNLENBQUN1RSxrQkFBa0IsR0FBR2pGLHNEQUFTQSxDQUFDMkUsc0JBQXNCLENBQzFEO2dCQUFDL0Q7Z0JBQVlELFdBQVdpRSxRQUFRO2FBQUcsRUFDbkNsRTtZQUdGLHlDQUF5QztZQUN6QyxNQUFNd0UsaUJBQWlCOUUsbURBQUlBLENBQUMrRSxPQUFPLENBQUNDLFFBQVE7WUFFNUMsTUFBTUMsS0FBSyxNQUFNakIsUUFBUXRDLE9BQU8sQ0FDN0JDLFVBQVUsQ0FDVCxJQUFJN0IsaURBQUVBLENBQUM4QixnQkFDUCxJQUFJOUIsaURBQUVBLENBQUMrQixrQkFFUkMsUUFBUSxDQUFDO2dCQUNSb0QsU0FBU0osZUFBZS9ELFNBQVM7Z0JBQ2pDK0IsYUFBYXZDO2dCQUNiNEUsZUFBZVA7Z0JBQ2ZRLHlCQUF5QlA7Z0JBQ3pCOUIsVUFBVUE7Z0JBQ1ZGLFdBQVc5QjtnQkFDWHNFLGdCQUFnQnhGLDBEQUFhQSxDQUFDUyxTQUFTO2dCQUN2Q2dGLGVBQWVuRiwrREFBZ0JBO2dCQUMvQm9GLE1BQU12RixtREFBSUEsQ0FBQ3dGLGtCQUFrQjtZQUMvQixHQUNDekQsT0FBTyxDQUFDO2dCQUFDK0M7YUFBZSxFQUN4QjlDLFdBQVc7WUFFZCxNQUFNeUQsWUFBWSxNQUFNekUsZ0JBQWdCaUUsSUFBSXBFLFlBQVk7Z0JBQUVrQixTQUFTO29CQUFDK0M7aUJBQWU7WUFBQztZQUNwRixNQUFNakUsV0FBVzZFLGtCQUFrQixDQUFDRCxXQUFXO1lBQy9DM0IsUUFBUTZCLEdBQUcsQ0FBQyx1Q0FBdUNGO1lBQ25EMUI7UUFDRixFQUFFLE9BQU9GLE9BQU87WUFDZEMsUUFBUUQsS0FBSyxDQUFDLCtCQUErQkE7UUFDL0MsU0FBVTtZQUNSdkMsYUFBYTtRQUNmO0lBQ0YsR0FBRztRQUFDUDtRQUFXUTtRQUFZVjtRQUFZRztRQUFpQitDO0tBQWlCO0lBRXpFLE1BQU0xQixZQUFZN0Msa0RBQVdBLENBQUMsT0FBTzhDO1FBQ25DLElBQUksQ0FBQ3ZCLGFBQWEsQ0FBQ0UsZ0JBQWdCO1FBRW5DLElBQUk7WUFDRkssYUFBYTtZQUNiLE1BQU0wQyxVQUFVekM7WUFDaEIsSUFBSSxDQUFDeUMsU0FBUztZQUVkLDRCQUE0QjtZQUM1QixNQUFNLENBQUNZLFNBQVMsR0FBR2hGLHNEQUFTQSxDQUFDMkUsc0JBQXNCLENBQ2pEO2dCQUFDL0Q7Z0JBQVlELFdBQVdpRSxRQUFRO2FBQUcsRUFDbkNsRTtZQUdGLDhCQUE4QjtZQUM5QixNQUFNLENBQUN1RSxrQkFBa0IsR0FBR2pGLHNEQUFTQSxDQUFDMkUsc0JBQXNCLENBQzFEO2dCQUFDL0Q7Z0JBQVlELFdBQVdpRSxRQUFRO2FBQUcsRUFDbkNsRTtZQUdGLHdCQUF3QjtZQUN4QixNQUFNLENBQUNnRSxZQUFZLEdBQUcxRSxzREFBU0EsQ0FBQzJFLHNCQUFzQixDQUNwRDtnQkFBQzVEO2dCQUFnQkksVUFBVXlELFFBQVE7Z0JBQUlqRSxXQUFXaUUsUUFBUTthQUFHLEVBQzdEbEU7WUFHRiw0QkFBNEI7WUFDNUIsTUFBTXNGLFlBQVksTUFBTTFGLDRFQUF5QkEsQ0FDL0NLLFlBQ0ErRCxhQUNBO1lBR0YsTUFBTXVCLGtCQUFrQjVFLGVBQWU4QixRQUFRO1lBRS9DLE1BQU1rQyxLQUFLLE1BQU1qQixRQUFRdEMsT0FBTyxDQUM3QlcsU0FBUyxDQUNSLElBQUl2QyxpREFBRUEsQ0FBQ3dDLFNBRVJSLFFBQVEsQ0FBQztnQkFDUm9ELFNBQVNqRSxlQUFlRixTQUFTO2dCQUNqQ29FLGVBQWVQO2dCQUNmUSx5QkFBeUJQO2dCQUN6QmlCLFdBQVd4QjtnQkFDWHlCLFlBQVlIO2dCQUNaOUMsYUFBYXZDO2dCQUNieUYsa0JBQWtCSDtnQkFDbEJ4QyxPQUFPdEM7Z0JBQ1BzRSxnQkFBZ0J4RiwwREFBYUEsQ0FBQ1MsU0FBUztnQkFDdkNnRixlQUFlbkYsK0RBQWdCQTtnQkFDL0I4RiwwQkFBMEI3RiwwRUFBMkJBO2dCQUNyRG1GLE1BQU12RixtREFBSUEsQ0FBQ3dGLGtCQUFrQjtZQUMvQixHQUNDeEQsV0FBVztZQUVkLE1BQU15RCxZQUFZLE1BQU16RSxnQkFBZ0JpRSxJQUFJcEU7WUFDNUMsTUFBTUEsV0FBVzZFLGtCQUFrQixDQUFDRCxXQUFXO1lBQy9DM0IsUUFBUTZCLEdBQUcsQ0FBQyxvQ0FBb0NGO1lBQ2hEcEI7WUFDQU47UUFDRixFQUFFLE9BQU9GLE9BQU87WUFDZEMsUUFBUUQsS0FBSyxDQUFDLHdCQUF3QkE7WUFDdEMsTUFBTUE7UUFDUixTQUFVO1lBQ1J2QyxhQUFhO1FBQ2Y7SUFDRixHQUFHO1FBQUNQO1FBQVdFO1FBQWdCTTtRQUFZVjtRQUFZRztRQUFpQnFEO1FBQWVOO0tBQWlCO0lBRXhHLE1BQU14QixjQUFjL0Msa0RBQVdBLENBQUM7UUFDOUIsSUFBSSxDQUFDdUIsYUFBYSxDQUFDSSxVQUFVO1FBRTdCLElBQUk7WUFDRkcsYUFBYTtZQUNiLE1BQU0wQyxVQUFVekM7WUFDaEIsSUFBSSxDQUFDeUMsU0FBUztZQUVkLHdCQUF3QjtZQUN4QixNQUFNLENBQUNNLFlBQVksR0FBRzFFLHNEQUFTQSxDQUFDMkUsc0JBQXNCLENBQ3BEO2dCQUFDNUQ7Z0JBQWdCSSxVQUFVeUQsUUFBUTtnQkFBSWpFLFdBQVdpRSxRQUFRO2FBQUcsRUFDN0RsRTtZQUdGLGlCQUFpQjtZQUNqQixNQUFNc0YsWUFBWSxNQUFNMUYsNEVBQXlCQSxDQUMvQ0ssWUFDQStELGFBQ0E7WUFHRix5QkFBeUI7WUFDekIsTUFBTTRCLG1CQUFtQixNQUFNaEcsNEVBQXlCQSxDQUN0REssWUFDQVE7WUFHRixNQUFNa0UsS0FBSyxNQUFNakIsUUFBUXRDLE9BQU8sQ0FDN0JhLFdBQVcsR0FDWFQsUUFBUSxDQUFDO2dCQUNSZ0UsV0FBV3hCO2dCQUNYeUIsWUFBWUg7Z0JBQ1pPLG9CQUFvQkQ7Z0JBQ3BCcEQsYUFBYXZDO2dCQUNiOEMsT0FBT3RDO2dCQUNQc0UsZ0JBQWdCeEYsMERBQWFBLENBQUNTLFNBQVM7Z0JBQ3ZDZ0YsZUFBZW5GLCtEQUFnQkE7Z0JBQy9COEYsMEJBQTBCN0YsMEVBQTJCQTtnQkFDckRtRixNQUFNdkYsbURBQUlBLENBQUN3RixrQkFBa0I7WUFDL0IsR0FDQ3hELFdBQVc7WUFFZCxNQUFNeUQsWUFBWSxNQUFNekUsZ0JBQWdCaUUsSUFBSXBFO1lBQzVDLE1BQU1BLFdBQVc2RSxrQkFBa0IsQ0FBQ0QsV0FBVztZQUMvQzNCLFFBQVE2QixHQUFHLENBQUMsa0NBQWtDRjtZQUM5Q3BCO1FBQ0YsRUFBRSxPQUFPUixPQUFPO1lBQ2RDLFFBQVFELEtBQUssQ0FBQywwQkFBMEJBO1lBQ3hDLE1BQU1BO1FBQ1IsU0FBVTtZQUNSdkMsYUFBYTtRQUNmO0lBQ0YsR0FBRztRQUFDUDtRQUFXSTtRQUFVSTtRQUFZVjtRQUFZRztRQUFpQnFEO0tBQWM7SUFFaEYsTUFBTTdCLGdCQUFnQmhELGtEQUFXQSxDQUFDLE9BQU9pRDtRQUN2QyxJQUFJLENBQUMxQixhQUFhLENBQUNFLGdCQUFnQjtRQUVuQyxJQUFJO1lBQ0ZLLGFBQWE7WUFDYixNQUFNMEMsVUFBVXpDO1lBQ2hCLElBQUksQ0FBQ3lDLFNBQVM7WUFFZCxNQUFNaUIsS0FBSyxNQUFNakIsUUFBUXRDLE9BQU8sQ0FDN0JjLGFBQWEsQ0FBQ0MsUUFDZFgsUUFBUSxDQUFDO2dCQUNSb0QsU0FBU2pFLGVBQWVGLFNBQVM7Z0JBQ2pDOEIsV0FBVzlCO1lBQ2IsR0FDQ2lCLFdBQVc7WUFFZCxNQUFNeUQsWUFBWSxNQUFNekUsZ0JBQWdCaUUsSUFBSXBFO1lBQzVDLE1BQU1BLFdBQVc2RSxrQkFBa0IsQ0FBQ0QsV0FBVztZQUMvQzNCLFFBQVE2QixHQUFHLENBQUMsV0FBZ0QsT0FBckNsRCxTQUFTLGNBQWMsZUFBYyxxQkFBbUJnRDtZQUMvRTFCO1FBQ0YsRUFBRSxPQUFPRixPQUFPO1lBQ2RDLFFBQVFELEtBQUssQ0FBQywyQkFBMkJBO1lBQ3pDLE1BQU1BO1FBQ1IsU0FBVTtZQUNSdkMsYUFBYTtRQUNmO0lBQ0YsR0FBRztRQUFDUDtRQUFXRTtRQUFnQk07UUFBWVY7UUFBWUc7UUFBaUIrQztLQUFpQjtJQUV6RixPQUFPO1FBQ0w5QztRQUNBRTtRQUNBRTtRQUNBMEM7UUFDQU07UUFDQU07UUFDQXRDO1FBQ0FFO1FBQ0FDO0lBQ0Y7QUFDRixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2hvb2tzL3VzZVByZXNhbGVQcm9ncmFtLnRzP2VhOGQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyB1c2VDb25uZWN0aW9uLCB1c2VXYWxsZXQgfSBmcm9tICdAc29sYW5hL3dhbGxldC1hZGFwdGVyLXJlYWN0JztcclxuaW1wb3J0IHsgUHVibGljS2V5LCBTeXN0ZW1Qcm9ncmFtLCBMQU1QT1JUU19QRVJfU09MIH0gZnJvbSAnQHNvbGFuYS93ZWIzLmpzJztcclxuaW1wb3J0IHsgQk4sIFByb2dyYW0sIHdlYjMsIEFuY2hvclByb3ZpZGVyLCBJZGwgfSBmcm9tICdAY29yYWwteHl6L2FuY2hvcic7XHJcbmltcG9ydCB7IFxyXG4gIGdldEFzc29jaWF0ZWRUb2tlbkFkZHJlc3MsIFxyXG4gIFRPS0VOX1BST0dSQU1fSUQsXHJcbiAgQVNTT0NJQVRFRF9UT0tFTl9QUk9HUkFNX0lEXHJcbn0gZnJvbSAnQHNvbGFuYS9zcGwtdG9rZW4nO1xyXG5pbXBvcnQgaWRsSnNvbiBmcm9tICcuLi91dGlscy9wcmVzYWxlLmpzb24nO1xyXG5cclxuLy8gUHJvZ3JhbSBJRCBmcm9tIHRoZSBJRExcclxuY29uc3QgcHJvZ3JhbUlkID0gbmV3IFB1YmxpY0tleSgnRjhGOU55N3AzalhrWmN0U216WkZmRG5wZGhycW5DVzR0UW5icVZZV0hjYnYnKTtcclxuY29uc3QgcGxhc21hTWludCA9IG5ldyBQdWJsaWNLZXkoJ0FSVEJKd0hqWWJ4REZZOWkycUxhR2RkbVRnV0R6WGg0aGtmdUVXaXNGaXBaJyk7XHJcblxyXG4vLyBTZWVkcyBmb3IgUERBc1xyXG5jb25zdCBWQVVMVF9TRUVEID0gQnVmZmVyLmZyb20oJ3ZhdWx0Jyk7XHJcbmNvbnN0IFVTRVJfSU5GT19TRUVEID0gQnVmZmVyLmZyb20oJ3VzZXJfaW5mbycpO1xyXG5cclxuZXhwb3J0IGNvbnN0IHVzZVByZXNhbGVQcm9ncmFtID0gKCkgPT4ge1xyXG4gIGNvbnN0IHsgY29ubmVjdGlvbiB9ID0gdXNlQ29ubmVjdGlvbigpO1xyXG4gIGNvbnN0IHdhbGxldCA9IHVzZVdhbGxldCgpO1xyXG4gIGNvbnN0IHsgcHVibGljS2V5LCBzZW5kVHJhbnNhY3Rpb24gfSA9IHdhbGxldDtcclxuICBjb25zdCBbcHJlc2FsZUFjY291bnQsIHNldFByZXNhbGVBY2NvdW50XSA9IHVzZVN0YXRlPGFueT4obnVsbCk7XHJcbiAgY29uc3QgW3VzZXJJbmZvLCBzZXRVc2VySW5mb10gPSB1c2VTdGF0ZTxhbnk+KG51bGwpO1xyXG4gIGNvbnN0IFtpc0xvYWRpbmcsIHNldElzTG9hZGluZ10gPSB1c2VTdGF0ZShmYWxzZSk7XHJcblxyXG4gIC8vIEhlbHBlciB0byBnZXQgdGhlIHByb2dyYW0gaW5zdGFuY2VcclxuICBjb25zdCBnZXRQcm9ncmFtID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xyXG4gICAgaWYgKCFwdWJsaWNLZXkpIHJldHVybiBudWxsO1xyXG4gICAgXHJcbiAgICB0cnkge1xyXG4gICAgICAvLyBDcmVhdGUgYSBwcm9wZXIgQW5jaG9yUHJvdmlkZXJcclxuICAgICAgY29uc3QgcHJvdmlkZXIgPSBuZXcgQW5jaG9yUHJvdmlkZXIoXHJcbiAgICAgICAgY29ubmVjdGlvbiwgXHJcbiAgICAgICAgd2FsbGV0IGFzIGFueSwgXHJcbiAgICAgICAgeyBjb21taXRtZW50OiAnY29uZmlybWVkJyB9XHJcbiAgICAgICk7XHJcbiAgICAgIFxyXG4gICAgICAvLyBVc2UgcHJvdmlkZXIud29ya3NwYWNlIGluc3RlYWQgb2YgZGlyZWN0bHkgY3JlYXRpbmcgYSBQcm9ncmFtXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgbWV0aG9kczoge1xyXG4gICAgICAgICAgLy8gU2ltdWxhdGUgdGhlIHByb2dyYW0gbWV0aG9kcyB3ZSBuZWVkXHJcbiAgICAgICAgICBpbml0aWFsaXplOiAocHJpY2VQZXJUb2tlbjogQk4sIHRvdGFsQWxsb2NhdGlvbjogQk4pID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICBhY2NvdW50czogKGFjY291bnRzOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgIHNpZ25lcnM6IChzaWduZXJzOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb246IGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQnVpbGQgYSB0cmFuc2FjdGlvbiBmb3IgaW5pdGlhbGl6aW5nIHRoZSBwcmVzYWxlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGl4ID0gYXdhaXQgUHJvZ3JhbS5jcmVhdGVQcm9ncmFtQWRkcmVzcyhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZGxKc29uIGFzIGFueSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9ncmFtSWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgd2ViMy5UcmFuc2FjdGlvbigpLmFkZChpeCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgYnV5VG9rZW5zOiAoYW1vdW50OiBCTikgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgIGFjY291bnRzOiAoYWNjb3VudHM6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb246IGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBCdWlsZCBhIHRyYW5zYWN0aW9uIGZvciBidXlpbmcgdG9rZW5zXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXggPSBhd2FpdCBQcm9ncmFtLmNyZWF0ZVByb2dyYW1BZGRyZXNzKFxyXG4gICAgICAgICAgICAgICAgICAgICAgaWRsSnNvbiBhcyBhbnksXHJcbiAgICAgICAgICAgICAgICAgICAgICBwcm9ncmFtSWQsXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHdlYjMuVHJhbnNhY3Rpb24oKS5hZGQoaXgpO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBjbGFpbVRva2VuczogKCkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgIGFjY291bnRzOiAoYWNjb3VudHM6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb246IGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBCdWlsZCBhIHRyYW5zYWN0aW9uIGZvciBjbGFpbWluZyB0b2tlbnNcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpeCA9IGF3YWl0IFByb2dyYW0uY3JlYXRlUHJvZ3JhbUFkZHJlc3MoXHJcbiAgICAgICAgICAgICAgICAgICAgICBpZGxKc29uIGFzIGFueSxcclxuICAgICAgICAgICAgICAgICAgICAgIHByb2dyYW1JZCxcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgd2ViMy5UcmFuc2FjdGlvbigpLmFkZChpeCk7XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHRvZ2dsZVByZXNhbGU6IChhY3RpdmU6IGJvb2xlYW4pID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICBhY2NvdW50czogKGFjY291bnRzOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uOiBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQnVpbGQgYSB0cmFuc2FjdGlvbiBmb3IgdG9nZ2xpbmcgcHJlc2FsZVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGl4ID0gYXdhaXQgUHJvZ3JhbS5jcmVhdGVQcm9ncmFtQWRkcmVzcyhcclxuICAgICAgICAgICAgICAgICAgICAgIGlkbEpzb24gYXMgYW55LFxyXG4gICAgICAgICAgICAgICAgICAgICAgcHJvZ3JhbUlkLFxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB3ZWIzLlRyYW5zYWN0aW9uKCkuYWRkKGl4KTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBhY2NvdW50OiB7XHJcbiAgICAgICAgICBwcmVzYWxlQWNjb3VudDoge1xyXG4gICAgICAgICAgICBhbGw6IGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgICAvLyBNb2NrIHJlc3BvbnNlIGZvciBwcmVzYWxlIGFjY291bnRzXHJcbiAgICAgICAgICAgICAgcmV0dXJuIFt7XHJcbiAgICAgICAgICAgICAgICBwdWJsaWNLZXk6IG5ldyBQdWJsaWNLZXkoaWRsSnNvbi5hZGRyZXNzKSxcclxuICAgICAgICAgICAgICAgIGFjY291bnQ6IHtcclxuICAgICAgICAgICAgICAgICAgYXV0aG9yaXR5OiBwdWJsaWNLZXksXHJcbiAgICAgICAgICAgICAgICAgIHBsYXNtYV9taW50OiBwbGFzbWFNaW50LFxyXG4gICAgICAgICAgICAgICAgICB0cmVhc3VyeTogcHVibGljS2V5LCAvLyBQbGFjZWhvbGRlclxyXG4gICAgICAgICAgICAgICAgICBwcmljZV9wZXJfdG9rZW46IG5ldyBCTigxMDAwMDAwMDApLCAvLyAwLjEgU09MXHJcbiAgICAgICAgICAgICAgICAgIHRvdGFsX2FsbG9jYXRpb246IG5ldyBCTigxMDAwMDAwMDAwMDAwKSwgLy8gMSwwMDAsMDAwIHRva2Vuc1xyXG4gICAgICAgICAgICAgICAgICB0b2tlbnNfc29sZDogbmV3IEJOKDApLFxyXG4gICAgICAgICAgICAgICAgICBpc19hY3RpdmU6IHRydWVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHVzZXJJbmZvOiB7XHJcbiAgICAgICAgICAgIGZldGNoOiBhc3luYyAoYWRkcmVzczogUHVibGljS2V5KSA9PiB7XHJcbiAgICAgICAgICAgICAgLy8gTW9jayByZXNwb25zZSBmb3IgdXNlciBpbmZvXHJcbiAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGJ1eWVyOiBwdWJsaWNLZXksXHJcbiAgICAgICAgICAgICAgICBhbW91bnQ6IG5ldyBCTigxMDAwMDAwMDAwMCksIC8vIDEwLDAwMCB0b2tlbnNcclxuICAgICAgICAgICAgICAgIHVubG9ja190aW1lOiBuZXcgQk4oTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCkgKyA4NjQwMCksIC8vIDEgZGF5IGZyb20gbm93XHJcbiAgICAgICAgICAgICAgICBjbGFpbWVkOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGJ1bXA6IDI1NFxyXG4gICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgY3JlYXRpbmcgcHJvZ3JhbSBpbnN0YW5jZTpcIiwgZXJyb3IpO1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICB9LCBbY29ubmVjdGlvbiwgcHVibGljS2V5LCB3YWxsZXRdKTtcclxuXHJcbiAgY29uc3QgZmV0Y2hQcmVzYWxlRGF0YSA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIHNldElzTG9hZGluZyh0cnVlKTtcclxuICAgICAgY29uc3QgcHJvZ3JhbSA9IGdldFByb2dyYW0oKTtcclxuICAgICAgaWYgKCFwcm9ncmFtKSByZXR1cm47XHJcblxyXG4gICAgICB0cnkge1xyXG4gICAgICAgIC8vIEZldGNoIGFsbCBwcmVzYWxlIGFjY291bnRzXHJcbiAgICAgICAgY29uc3QgcHJlc2FsZXMgPSBhd2FpdCBwcm9ncmFtLmFjY291bnQucHJlc2FsZUFjY291bnQuYWxsKCk7XHJcbiAgICAgICAgaWYgKHByZXNhbGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgIGNvbnN0IGFjY291bnQgPSBwcmVzYWxlc1swXS5hY2NvdW50O1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAvLyBNYXAgc25ha2VfY2FzZSB0byBjYW1lbENhc2UgcHJvcGVydGllcyBmb3IgY29tcGF0aWJpbGl0eVxyXG4gICAgICAgICAgc2V0UHJlc2FsZUFjY291bnQoe1xyXG4gICAgICAgICAgICBhdXRob3JpdHk6IGFjY291bnQuYXV0aG9yaXR5LFxyXG4gICAgICAgICAgICBwbGFzbWFNaW50OiBhY2NvdW50LnBsYXNtYV9taW50LFxyXG4gICAgICAgICAgICB0cmVhc3VyeTogYWNjb3VudC50cmVhc3VyeSxcclxuICAgICAgICAgICAgcHJpY2VQZXJUb2tlbjogYWNjb3VudC5wcmljZV9wZXJfdG9rZW4sXHJcbiAgICAgICAgICAgIHRvdGFsQWxsb2NhdGlvbjogYWNjb3VudC50b3RhbF9hbGxvY2F0aW9uLFxyXG4gICAgICAgICAgICB0b2tlbnNTb2xkOiBhY2NvdW50LnRva2Vuc19zb2xkLFxyXG4gICAgICAgICAgICBpc0FjdGl2ZTogYWNjb3VudC5pc19hY3RpdmUsXHJcbiAgICAgICAgICAgIHB1YmxpY0tleTogcHJlc2FsZXNbMF0ucHVibGljS2V5XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGZldGNoaW5nIHByZXNhbGUgYWNjb3VudHM6XCIsIGVycm9yKTtcclxuICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgcHJlc2FsZSBkYXRhOicsIGVycm9yKTtcclxuICAgIH0gZmluYWxseSB7XHJcbiAgICAgIHNldElzTG9hZGluZyhmYWxzZSk7XHJcbiAgICB9XHJcbiAgfSwgW2dldFByb2dyYW1dKTtcclxuXHJcbiAgY29uc3QgZmV0Y2hVc2VySW5mbyA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcclxuICAgIGlmICghcHVibGljS2V5KSByZXR1cm47XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgc2V0SXNMb2FkaW5nKHRydWUpO1xyXG4gICAgICBjb25zdCBwcm9ncmFtID0gZ2V0UHJvZ3JhbSgpO1xyXG4gICAgICBpZiAoIXByb2dyYW0pIHJldHVybjtcclxuXHJcbiAgICAgIC8vIEdldCBQREEgZm9yIHVzZXIgaW5mbyBhY2NvdW50XHJcbiAgICAgIGNvbnN0IFt1c2VySW5mb1BkYV0gPSBQdWJsaWNLZXkuZmluZFByb2dyYW1BZGRyZXNzU3luYyhcclxuICAgICAgICBbVVNFUl9JTkZPX1NFRUQsIHB1YmxpY0tleS50b0J1ZmZlcigpLCBwbGFzbWFNaW50LnRvQnVmZmVyKCldLFxyXG4gICAgICAgIHByb2dyYW1JZFxyXG4gICAgICApO1xyXG5cclxuICAgICAgdHJ5IHtcclxuICAgICAgICBjb25zdCB1c2VySW5mb0FjY291bnQgPSBhd2FpdCBwcm9ncmFtLmFjY291bnQudXNlckluZm8uZmV0Y2godXNlckluZm9QZGEpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIE1hcCBzbmFrZV9jYXNlIHRvIGNhbWVsQ2FzZSBwcm9wZXJ0aWVzIGZvciBjb21wYXRpYmlsaXR5XHJcbiAgICAgICAgc2V0VXNlckluZm8oe1xyXG4gICAgICAgICAgYnV5ZXI6IHVzZXJJbmZvQWNjb3VudC5idXllcixcclxuICAgICAgICAgIGFtb3VudDogdXNlckluZm9BY2NvdW50LmFtb3VudCxcclxuICAgICAgICAgIHVubG9ja1RpbWU6IHVzZXJJbmZvQWNjb3VudC51bmxvY2tfdGltZSxcclxuICAgICAgICAgIGNsYWltZWQ6IHVzZXJJbmZvQWNjb3VudC5jbGFpbWVkLFxyXG4gICAgICAgICAgYnVtcDogdXNlckluZm9BY2NvdW50LmJ1bXBcclxuICAgICAgICB9KTtcclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAvLyBVc2VyIGluZm8gYWNjb3VudCBkb2Vzbid0IGV4aXN0IHlldFxyXG4gICAgICAgIHNldFVzZXJJbmZvKG51bGwpO1xyXG4gICAgICB9XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyB1c2VyIGluZm86JywgZXJyb3IpO1xyXG4gICAgfSBmaW5hbGx5IHtcclxuICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcclxuICAgIH1cclxuICB9LCBbcHVibGljS2V5LCBnZXRQcm9ncmFtXSk7XHJcblxyXG4gIGNvbnN0IGluaXRpYWxpemVQcmVzYWxlID0gdXNlQ2FsbGJhY2soYXN5bmMgKFxyXG4gICAgcHJpY2VQZXJUb2tlbjogbnVtYmVyLFxyXG4gICAgdG90YWxBbGxvY2F0aW9uOiBudW1iZXIsXHJcbiAgICB0cmVhc3VyeTogUHVibGljS2V5XHJcbiAgKSA9PiB7XHJcbiAgICBpZiAoIXB1YmxpY0tleSkgcmV0dXJuO1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIHNldElzTG9hZGluZyh0cnVlKTtcclxuICAgICAgY29uc3QgcHJvZ3JhbSA9IGdldFByb2dyYW0oKTtcclxuICAgICAgaWYgKCFwcm9ncmFtKSByZXR1cm47XHJcblxyXG4gICAgICAvLyBHZXQgUERBIGZvciBwcmVzYWxlIHZhdWx0XHJcbiAgICAgIGNvbnN0IFt2YXVsdFBkYV0gPSBQdWJsaWNLZXkuZmluZFByb2dyYW1BZGRyZXNzU3luYyhcclxuICAgICAgICBbVkFVTFRfU0VFRCwgcGxhc21hTWludC50b0J1ZmZlcigpXSxcclxuICAgICAgICBwcm9ncmFtSWRcclxuICAgICAgKTtcclxuXHJcbiAgICAgIC8vIEdldCBQREEgZm9yIHZhdWx0IGF1dGhvcml0eVxyXG4gICAgICBjb25zdCBbdmF1bHRBdXRob3JpdHlQZGFdID0gUHVibGljS2V5LmZpbmRQcm9ncmFtQWRkcmVzc1N5bmMoXHJcbiAgICAgICAgW1ZBVUxUX1NFRUQsIHBsYXNtYU1pbnQudG9CdWZmZXIoKV0sXHJcbiAgICAgICAgcHJvZ3JhbUlkXHJcbiAgICAgICk7XHJcblxyXG4gICAgICAvLyBDcmVhdGUgYSBuZXcgYWNjb3VudCBmb3IgcHJlc2FsZSBzdGF0ZVxyXG4gICAgICBjb25zdCBwcmVzYWxlS2V5cGFpciA9IHdlYjMuS2V5cGFpci5nZW5lcmF0ZSgpO1xyXG5cclxuICAgICAgY29uc3QgdHggPSBhd2FpdCBwcm9ncmFtLm1ldGhvZHNcclxuICAgICAgICAuaW5pdGlhbGl6ZShcclxuICAgICAgICAgIG5ldyBCTihwcmljZVBlclRva2VuKSxcclxuICAgICAgICAgIG5ldyBCTih0b3RhbEFsbG9jYXRpb24pLFxyXG4gICAgICAgIClcclxuICAgICAgICAuYWNjb3VudHMoe1xyXG4gICAgICAgICAgcHJlc2FsZTogcHJlc2FsZUtleXBhaXIucHVibGljS2V5LFxyXG4gICAgICAgICAgcGxhc21hX21pbnQ6IHBsYXNtYU1pbnQsXHJcbiAgICAgICAgICBwcmVzYWxlX3ZhdWx0OiB2YXVsdFBkYSxcclxuICAgICAgICAgIHByZXNhbGVfdmF1bHRfYXV0aG9yaXR5OiB2YXVsdEF1dGhvcml0eVBkYSxcclxuICAgICAgICAgIHRyZWFzdXJ5OiB0cmVhc3VyeSxcclxuICAgICAgICAgIGF1dGhvcml0eTogcHVibGljS2V5LFxyXG4gICAgICAgICAgc3lzdGVtX3Byb2dyYW06IFN5c3RlbVByb2dyYW0ucHJvZ3JhbUlkLFxyXG4gICAgICAgICAgdG9rZW5fcHJvZ3JhbTogVE9LRU5fUFJPR1JBTV9JRCxcclxuICAgICAgICAgIHJlbnQ6IHdlYjMuU1lTVkFSX1JFTlRfUFVCS0VZLFxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLnNpZ25lcnMoW3ByZXNhbGVLZXlwYWlyXSlcclxuICAgICAgICAudHJhbnNhY3Rpb24oKTtcclxuXHJcbiAgICAgIGNvbnN0IHNpZ25hdHVyZSA9IGF3YWl0IHNlbmRUcmFuc2FjdGlvbih0eCwgY29ubmVjdGlvbiwgeyBzaWduZXJzOiBbcHJlc2FsZUtleXBhaXJdIH0pO1xyXG4gICAgICBhd2FpdCBjb25uZWN0aW9uLmNvbmZpcm1UcmFuc2FjdGlvbihzaWduYXR1cmUsICdjb25maXJtZWQnKTtcclxuICAgICAgY29uc29sZS5sb2coJ1ByZXNhbGUgaW5pdGlhbGl6ZWQgd2l0aCBzaWduYXR1cmU6Jywgc2lnbmF0dXJlKTtcclxuICAgICAgZmV0Y2hQcmVzYWxlRGF0YSgpO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgaW5pdGlhbGl6aW5nIHByZXNhbGU6JywgZXJyb3IpO1xyXG4gICAgfSBmaW5hbGx5IHtcclxuICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcclxuICAgIH1cclxuICB9LCBbcHVibGljS2V5LCBnZXRQcm9ncmFtLCBjb25uZWN0aW9uLCBzZW5kVHJhbnNhY3Rpb24sIGZldGNoUHJlc2FsZURhdGFdKTtcclxuXHJcbiAgY29uc3QgYnV5VG9rZW5zID0gdXNlQ2FsbGJhY2soYXN5bmMgKGFtb3VudDogbnVtYmVyKSA9PiB7XHJcbiAgICBpZiAoIXB1YmxpY0tleSB8fCAhcHJlc2FsZUFjY291bnQpIHJldHVybjtcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBzZXRJc0xvYWRpbmcodHJ1ZSk7XHJcbiAgICAgIGNvbnN0IHByb2dyYW0gPSBnZXRQcm9ncmFtKCk7XHJcbiAgICAgIGlmICghcHJvZ3JhbSkgcmV0dXJuO1xyXG5cclxuICAgICAgLy8gR2V0IFBEQSBmb3IgcHJlc2FsZSB2YXVsdFxyXG4gICAgICBjb25zdCBbdmF1bHRQZGFdID0gUHVibGljS2V5LmZpbmRQcm9ncmFtQWRkcmVzc1N5bmMoXHJcbiAgICAgICAgW1ZBVUxUX1NFRUQsIHBsYXNtYU1pbnQudG9CdWZmZXIoKV0sXHJcbiAgICAgICAgcHJvZ3JhbUlkXHJcbiAgICAgICk7XHJcblxyXG4gICAgICAvLyBHZXQgUERBIGZvciB2YXVsdCBhdXRob3JpdHlcclxuICAgICAgY29uc3QgW3ZhdWx0QXV0aG9yaXR5UGRhXSA9IFB1YmxpY0tleS5maW5kUHJvZ3JhbUFkZHJlc3NTeW5jKFxyXG4gICAgICAgIFtWQVVMVF9TRUVELCBwbGFzbWFNaW50LnRvQnVmZmVyKCldLFxyXG4gICAgICAgIHByb2dyYW1JZFxyXG4gICAgICApO1xyXG5cclxuICAgICAgLy8gR2V0IFBEQSBmb3IgdXNlciBpbmZvXHJcbiAgICAgIGNvbnN0IFt1c2VySW5mb1BkYV0gPSBQdWJsaWNLZXkuZmluZFByb2dyYW1BZGRyZXNzU3luYyhcclxuICAgICAgICBbVVNFUl9JTkZPX1NFRUQsIHB1YmxpY0tleS50b0J1ZmZlcigpLCBwbGFzbWFNaW50LnRvQnVmZmVyKCldLFxyXG4gICAgICAgIHByb2dyYW1JZFxyXG4gICAgICApO1xyXG5cclxuICAgICAgLy8gR2V0IHVzZXIgdmF1bHQgZm9yIHRva2Vuc1xyXG4gICAgICBjb25zdCB1c2VyVmF1bHQgPSBhd2FpdCBnZXRBc3NvY2lhdGVkVG9rZW5BZGRyZXNzKFxyXG4gICAgICAgIHBsYXNtYU1pbnQsXHJcbiAgICAgICAgdXNlckluZm9QZGEsXHJcbiAgICAgICAgdHJ1ZVxyXG4gICAgICApO1xyXG5cclxuICAgICAgY29uc3QgdHJlYXN1cnlBY2NvdW50ID0gcHJlc2FsZUFjY291bnQudHJlYXN1cnk7XHJcblxyXG4gICAgICBjb25zdCB0eCA9IGF3YWl0IHByb2dyYW0ubWV0aG9kc1xyXG4gICAgICAgIC5idXlUb2tlbnMoXHJcbiAgICAgICAgICBuZXcgQk4oYW1vdW50KVxyXG4gICAgICAgIClcclxuICAgICAgICAuYWNjb3VudHMoe1xyXG4gICAgICAgICAgcHJlc2FsZTogcHJlc2FsZUFjY291bnQucHVibGljS2V5LFxyXG4gICAgICAgICAgcHJlc2FsZV92YXVsdDogdmF1bHRQZGEsXHJcbiAgICAgICAgICBwcmVzYWxlX3ZhdWx0X2F1dGhvcml0eTogdmF1bHRBdXRob3JpdHlQZGEsXHJcbiAgICAgICAgICB1c2VyX2luZm86IHVzZXJJbmZvUGRhLFxyXG4gICAgICAgICAgdXNlcl92YXVsdDogdXNlclZhdWx0LFxyXG4gICAgICAgICAgcGxhc21hX21pbnQ6IHBsYXNtYU1pbnQsXHJcbiAgICAgICAgICB0cmVhc3VyeV9hY2NvdW50OiB0cmVhc3VyeUFjY291bnQsXHJcbiAgICAgICAgICBidXllcjogcHVibGljS2V5LFxyXG4gICAgICAgICAgc3lzdGVtX3Byb2dyYW06IFN5c3RlbVByb2dyYW0ucHJvZ3JhbUlkLFxyXG4gICAgICAgICAgdG9rZW5fcHJvZ3JhbTogVE9LRU5fUFJPR1JBTV9JRCxcclxuICAgICAgICAgIGFzc29jaWF0ZWRfdG9rZW5fcHJvZ3JhbTogQVNTT0NJQVRFRF9UT0tFTl9QUk9HUkFNX0lELFxyXG4gICAgICAgICAgcmVudDogd2ViMy5TWVNWQVJfUkVOVF9QVUJLRVksXHJcbiAgICAgICAgfSlcclxuICAgICAgICAudHJhbnNhY3Rpb24oKTtcclxuXHJcbiAgICAgIGNvbnN0IHNpZ25hdHVyZSA9IGF3YWl0IHNlbmRUcmFuc2FjdGlvbih0eCwgY29ubmVjdGlvbik7XHJcbiAgICAgIGF3YWl0IGNvbm5lY3Rpb24uY29uZmlybVRyYW5zYWN0aW9uKHNpZ25hdHVyZSwgJ2NvbmZpcm1lZCcpO1xyXG4gICAgICBjb25zb2xlLmxvZygnVG9rZW5zIHB1cmNoYXNlZCB3aXRoIHNpZ25hdHVyZTonLCBzaWduYXR1cmUpO1xyXG4gICAgICBmZXRjaFVzZXJJbmZvKCk7XHJcbiAgICAgIGZldGNoUHJlc2FsZURhdGEoKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGJ1eWluZyB0b2tlbnM6JywgZXJyb3IpO1xyXG4gICAgICB0aHJvdyBlcnJvcjtcclxuICAgIH0gZmluYWxseSB7XHJcbiAgICAgIHNldElzTG9hZGluZyhmYWxzZSk7XHJcbiAgICB9XHJcbiAgfSwgW3B1YmxpY0tleSwgcHJlc2FsZUFjY291bnQsIGdldFByb2dyYW0sIGNvbm5lY3Rpb24sIHNlbmRUcmFuc2FjdGlvbiwgZmV0Y2hVc2VySW5mbywgZmV0Y2hQcmVzYWxlRGF0YV0pO1xyXG5cclxuICBjb25zdCBjbGFpbVRva2VucyA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcclxuICAgIGlmICghcHVibGljS2V5IHx8ICF1c2VySW5mbykgcmV0dXJuO1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIHNldElzTG9hZGluZyh0cnVlKTtcclxuICAgICAgY29uc3QgcHJvZ3JhbSA9IGdldFByb2dyYW0oKTtcclxuICAgICAgaWYgKCFwcm9ncmFtKSByZXR1cm47XHJcblxyXG4gICAgICAvLyBHZXQgUERBIGZvciB1c2VyIGluZm9cclxuICAgICAgY29uc3QgW3VzZXJJbmZvUGRhXSA9IFB1YmxpY0tleS5maW5kUHJvZ3JhbUFkZHJlc3NTeW5jKFxyXG4gICAgICAgIFtVU0VSX0lORk9fU0VFRCwgcHVibGljS2V5LnRvQnVmZmVyKCksIHBsYXNtYU1pbnQudG9CdWZmZXIoKV0sXHJcbiAgICAgICAgcHJvZ3JhbUlkXHJcbiAgICAgICk7XHJcblxyXG4gICAgICAvLyBHZXQgdXNlciB2YXVsdFxyXG4gICAgICBjb25zdCB1c2VyVmF1bHQgPSBhd2FpdCBnZXRBc3NvY2lhdGVkVG9rZW5BZGRyZXNzKFxyXG4gICAgICAgIHBsYXNtYU1pbnQsXHJcbiAgICAgICAgdXNlckluZm9QZGEsXHJcbiAgICAgICAgdHJ1ZVxyXG4gICAgICApO1xyXG5cclxuICAgICAgLy8gR2V0IHVzZXIgdG9rZW4gYWNjb3VudFxyXG4gICAgICBjb25zdCB1c2VyVG9rZW5BY2NvdW50ID0gYXdhaXQgZ2V0QXNzb2NpYXRlZFRva2VuQWRkcmVzcyhcclxuICAgICAgICBwbGFzbWFNaW50LFxyXG4gICAgICAgIHB1YmxpY0tleVxyXG4gICAgICApO1xyXG5cclxuICAgICAgY29uc3QgdHggPSBhd2FpdCBwcm9ncmFtLm1ldGhvZHNcclxuICAgICAgICAuY2xhaW1Ub2tlbnMoKVxyXG4gICAgICAgIC5hY2NvdW50cyh7XHJcbiAgICAgICAgICB1c2VyX2luZm86IHVzZXJJbmZvUGRhLFxyXG4gICAgICAgICAgdXNlcl92YXVsdDogdXNlclZhdWx0LFxyXG4gICAgICAgICAgdXNlcl90b2tlbl9hY2NvdW50OiB1c2VyVG9rZW5BY2NvdW50LFxyXG4gICAgICAgICAgcGxhc21hX21pbnQ6IHBsYXNtYU1pbnQsXHJcbiAgICAgICAgICBidXllcjogcHVibGljS2V5LFxyXG4gICAgICAgICAgc3lzdGVtX3Byb2dyYW06IFN5c3RlbVByb2dyYW0ucHJvZ3JhbUlkLFxyXG4gICAgICAgICAgdG9rZW5fcHJvZ3JhbTogVE9LRU5fUFJPR1JBTV9JRCxcclxuICAgICAgICAgIGFzc29jaWF0ZWRfdG9rZW5fcHJvZ3JhbTogQVNTT0NJQVRFRF9UT0tFTl9QUk9HUkFNX0lELFxyXG4gICAgICAgICAgcmVudDogd2ViMy5TWVNWQVJfUkVOVF9QVUJLRVksXHJcbiAgICAgICAgfSlcclxuICAgICAgICAudHJhbnNhY3Rpb24oKTtcclxuXHJcbiAgICAgIGNvbnN0IHNpZ25hdHVyZSA9IGF3YWl0IHNlbmRUcmFuc2FjdGlvbih0eCwgY29ubmVjdGlvbik7XHJcbiAgICAgIGF3YWl0IGNvbm5lY3Rpb24uY29uZmlybVRyYW5zYWN0aW9uKHNpZ25hdHVyZSwgJ2NvbmZpcm1lZCcpO1xyXG4gICAgICBjb25zb2xlLmxvZygnVG9rZW5zIGNsYWltZWQgd2l0aCBzaWduYXR1cmU6Jywgc2lnbmF0dXJlKTtcclxuICAgICAgZmV0Y2hVc2VySW5mbygpO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgY2xhaW1pbmcgdG9rZW5zOicsIGVycm9yKTtcclxuICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICB9IGZpbmFsbHkge1xyXG4gICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xyXG4gICAgfVxyXG4gIH0sIFtwdWJsaWNLZXksIHVzZXJJbmZvLCBnZXRQcm9ncmFtLCBjb25uZWN0aW9uLCBzZW5kVHJhbnNhY3Rpb24sIGZldGNoVXNlckluZm9dKTtcclxuXHJcbiAgY29uc3QgdG9nZ2xlUHJlc2FsZSA9IHVzZUNhbGxiYWNrKGFzeW5jIChhY3RpdmU6IGJvb2xlYW4pID0+IHtcclxuICAgIGlmICghcHVibGljS2V5IHx8ICFwcmVzYWxlQWNjb3VudCkgcmV0dXJuO1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIHNldElzTG9hZGluZyh0cnVlKTtcclxuICAgICAgY29uc3QgcHJvZ3JhbSA9IGdldFByb2dyYW0oKTtcclxuICAgICAgaWYgKCFwcm9ncmFtKSByZXR1cm47XHJcblxyXG4gICAgICBjb25zdCB0eCA9IGF3YWl0IHByb2dyYW0ubWV0aG9kc1xyXG4gICAgICAgIC50b2dnbGVQcmVzYWxlKGFjdGl2ZSlcclxuICAgICAgICAuYWNjb3VudHMoe1xyXG4gICAgICAgICAgcHJlc2FsZTogcHJlc2FsZUFjY291bnQucHVibGljS2V5LFxyXG4gICAgICAgICAgYXV0aG9yaXR5OiBwdWJsaWNLZXksXHJcbiAgICAgICAgfSlcclxuICAgICAgICAudHJhbnNhY3Rpb24oKTtcclxuXHJcbiAgICAgIGNvbnN0IHNpZ25hdHVyZSA9IGF3YWl0IHNlbmRUcmFuc2FjdGlvbih0eCwgY29ubmVjdGlvbik7XHJcbiAgICAgIGF3YWl0IGNvbm5lY3Rpb24uY29uZmlybVRyYW5zYWN0aW9uKHNpZ25hdHVyZSwgJ2NvbmZpcm1lZCcpO1xyXG4gICAgICBjb25zb2xlLmxvZyhgUHJlc2FsZSAke2FjdGl2ZSA/ICdhY3RpdmF0ZWQnIDogJ2RlYWN0aXZhdGVkJ30gd2l0aCBzaWduYXR1cmU6YCwgc2lnbmF0dXJlKTtcclxuICAgICAgZmV0Y2hQcmVzYWxlRGF0YSgpO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgdG9nZ2xpbmcgcHJlc2FsZTonLCBlcnJvcik7XHJcbiAgICAgIHRocm93IGVycm9yO1xyXG4gICAgfSBmaW5hbGx5IHtcclxuICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcclxuICAgIH1cclxuICB9LCBbcHVibGljS2V5LCBwcmVzYWxlQWNjb3VudCwgZ2V0UHJvZ3JhbSwgY29ubmVjdGlvbiwgc2VuZFRyYW5zYWN0aW9uLCBmZXRjaFByZXNhbGVEYXRhXSk7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBwcmVzYWxlQWNjb3VudCxcclxuICAgIHVzZXJJbmZvLFxyXG4gICAgaXNMb2FkaW5nLFxyXG4gICAgZmV0Y2hQcmVzYWxlRGF0YSxcclxuICAgIGZldGNoVXNlckluZm8sXHJcbiAgICBpbml0aWFsaXplUHJlc2FsZSxcclxuICAgIGJ1eVRva2VucyxcclxuICAgIGNsYWltVG9rZW5zLFxyXG4gICAgdG9nZ2xlUHJlc2FsZSxcclxuICB9O1xyXG59OyAiXSwibmFtZXMiOlsidXNlQ2FsbGJhY2siLCJ1c2VTdGF0ZSIsInVzZUNvbm5lY3Rpb24iLCJ1c2VXYWxsZXQiLCJQdWJsaWNLZXkiLCJTeXN0ZW1Qcm9ncmFtIiwiQk4iLCJQcm9ncmFtIiwid2ViMyIsIkFuY2hvclByb3ZpZGVyIiwiZ2V0QXNzb2NpYXRlZFRva2VuQWRkcmVzcyIsIlRPS0VOX1BST0dSQU1fSUQiLCJBU1NPQ0lBVEVEX1RPS0VOX1BST0dSQU1fSUQiLCJpZGxKc29uIiwicHJvZ3JhbUlkIiwicGxhc21hTWludCIsIlZBVUxUX1NFRUQiLCJCdWZmZXIiLCJmcm9tIiwiVVNFUl9JTkZPX1NFRUQiLCJ1c2VQcmVzYWxlUHJvZ3JhbSIsImNvbm5lY3Rpb24iLCJ3YWxsZXQiLCJwdWJsaWNLZXkiLCJzZW5kVHJhbnNhY3Rpb24iLCJwcmVzYWxlQWNjb3VudCIsInNldFByZXNhbGVBY2NvdW50IiwidXNlckluZm8iLCJzZXRVc2VySW5mbyIsImlzTG9hZGluZyIsInNldElzTG9hZGluZyIsImdldFByb2dyYW0iLCJwcm92aWRlciIsImNvbW1pdG1lbnQiLCJtZXRob2RzIiwiaW5pdGlhbGl6ZSIsInByaWNlUGVyVG9rZW4iLCJ0b3RhbEFsbG9jYXRpb24iLCJhY2NvdW50cyIsInNpZ25lcnMiLCJ0cmFuc2FjdGlvbiIsIml4IiwiY3JlYXRlUHJvZ3JhbUFkZHJlc3MiLCJUcmFuc2FjdGlvbiIsImFkZCIsImJ1eVRva2VucyIsImFtb3VudCIsImNsYWltVG9rZW5zIiwidG9nZ2xlUHJlc2FsZSIsImFjdGl2ZSIsImFjY291bnQiLCJhbGwiLCJhZGRyZXNzIiwiYXV0aG9yaXR5IiwicGxhc21hX21pbnQiLCJ0cmVhc3VyeSIsInByaWNlX3Blcl90b2tlbiIsInRvdGFsX2FsbG9jYXRpb24iLCJ0b2tlbnNfc29sZCIsImlzX2FjdGl2ZSIsImZldGNoIiwiYnV5ZXIiLCJ1bmxvY2tfdGltZSIsIk1hdGgiLCJmbG9vciIsIkRhdGUiLCJub3ciLCJjbGFpbWVkIiwiYnVtcCIsImVycm9yIiwiY29uc29sZSIsImZldGNoUHJlc2FsZURhdGEiLCJwcm9ncmFtIiwicHJlc2FsZXMiLCJsZW5ndGgiLCJ0b2tlbnNTb2xkIiwiaXNBY3RpdmUiLCJmZXRjaFVzZXJJbmZvIiwidXNlckluZm9QZGEiLCJmaW5kUHJvZ3JhbUFkZHJlc3NTeW5jIiwidG9CdWZmZXIiLCJ1c2VySW5mb0FjY291bnQiLCJ1bmxvY2tUaW1lIiwiaW5pdGlhbGl6ZVByZXNhbGUiLCJ2YXVsdFBkYSIsInZhdWx0QXV0aG9yaXR5UGRhIiwicHJlc2FsZUtleXBhaXIiLCJLZXlwYWlyIiwiZ2VuZXJhdGUiLCJ0eCIsInByZXNhbGUiLCJwcmVzYWxlX3ZhdWx0IiwicHJlc2FsZV92YXVsdF9hdXRob3JpdHkiLCJzeXN0ZW1fcHJvZ3JhbSIsInRva2VuX3Byb2dyYW0iLCJyZW50IiwiU1lTVkFSX1JFTlRfUFVCS0VZIiwic2lnbmF0dXJlIiwiY29uZmlybVRyYW5zYWN0aW9uIiwibG9nIiwidXNlclZhdWx0IiwidHJlYXN1cnlBY2NvdW50IiwidXNlcl9pbmZvIiwidXNlcl92YXVsdCIsInRyZWFzdXJ5X2FjY291bnQiLCJhc3NvY2lhdGVkX3Rva2VuX3Byb2dyYW0iLCJ1c2VyVG9rZW5BY2NvdW50IiwidXNlcl90b2tlbl9hY2NvdW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./hooks/usePresaleProgram.ts\n"));

/***/ })

});